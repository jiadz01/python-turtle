'''Pinwheel_1.py 从知乎下载的简单风车并可动画转动(本程序动态转5圈),未修改,仅对语句进行了注释.
动画算法:for循环与清屏clear()和时间time函数库sleep()函数延时组合,不断画出不同旋转角度的风车画面(帧),
利用人类"视觉暂留"(约0.1-0.4秒)现象构成旋转风车动画,就象放映电影.
最终改写优化版详见:Pinwheel_4.py和Pinwheel_5.py.
'''
import turtle as t #创建一个turtle对象实例t,名称t将直接绑定到所导入的模块, 调用的函数或对象前加(t.)
import time #导入python自带的时间函数库time,调用库time的函数或对象前加(time.)

#创建画风车函数,1个形参:起始画风车画笔的朝向角度变量r(0-360内增量变化,产生动画视觉效果)
def draw(r):
    #画风车杆
    t.pensize(4) #画笔粗细尺寸设置4    还可用还可用width()
    t.penup() #抬起画笔,这样移动画笔到下一个绘图起始点的过程中不留笔迹线条,还可用up()
    t.goto(0,0) #移动海龟画笔到坐标x,y位置准备绘图,还可用setpos()
    t.pendown() #放下画笔准备画图, 还可用down()
    t.goto(0,-150) #移动海龟画笔到坐标0,-150,画风车杆

    #画风车四个叶片
    t.pensize(1) #画笔粗细尺寸设置1
    for i in range(4): #for循环4次画风车四个叶片,i=0,1,2,3  画叶片顺序(当起始方向r=0,i=0时):右,上,左,下
        t.penup()
        t.goto(0,0) #移动海龟画笔到坐标0,0,画风车叶片
        t.pendown()
        t.setheading(i*90+r) #设置画风车叶片画笔的朝向角度,i*90意为每画一片叶片后增加90角度
        t.fillcolor('#50B2F8') #设置叶片前端充填颜色
        t.begin_fill() #下边画图将充填颜色
        t.forward(100) #画笔前进100画出线条
        t.left(150) #设置画笔向左转150角度值
        t.forward(70) #画笔前进70画出线条
        t.end_fill() #在begin_fill()之间的叶片前端绘图完成填色
        t.fillcolor('#063EC5') #设置叶片后段充填颜色
        t.begin_fill() #下边画图将充填颜色
        t.left(30) #设置画笔向左转30角度值
        t.forward(40) #画笔前进40画出线条
        t.left(90) #设置画笔向左转90角度值
        t.forward(35) #画笔前进35画出线条
        t.end_fill() #在begin_fill()之间的叶片后段绘图完成填色

#画一个静态风车图
t.speed(1) #画笔画图速度设置 1最慢,速度关系按1,2,3,4,5,6,7,8,9,0排列  最快是0
draw(0) #调用风车函数,画一个静态风车,参数r值在0-360内变化使静态风车叶片有不同的角度

#让这个风车转动5圈的动画
for r in range(0,360*5,2): #for循环,r从0开始,到360*5(显示动画转动5圈)停止,步长是2即:r=0,2,4,6,8.....
    t.tracer(False) #启用/禁用动画并设置刷新延迟时间为0,这时后边画图速度很快,还可用tracer(0)等效
    t.clear() #删除全部绘图,清屏,与for循环内的语句构成在人眼中风车旋转的动画画面
    draw(r) #每次循环 r=0,2,4...356,358...,画出不同旋转角度的静态风车
    time.sleep(0.01) #调用时间time函数库sleep()函数延时,线程将被暂停执行 0.01 秒,暂停时间越大动画转速越慢
    t.hideturtle() #隐藏海龟可加速绘画速度,实际上可将此语句优化(移)到for循环前边去
    t.tracer(True) #恢复启用/禁用动画设置函数,还可用tracer(1)等效

t.done() #调用 Tkinter 的 mainloop 函数。必须作为一个海龟绘图程序的结束语句